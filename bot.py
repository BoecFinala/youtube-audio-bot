import os
import logging
import requests
import yt_dlp
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
RAPIDAPI_KEY = os.getenv("RAPIDAPI_KEY")
API_HOST = "youtube-mp3-2025.p.rapidapi.com"
API_URL = "https://youtube-mp3-2025.p.rapidapi.com/v1/social/youtube/audio"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéµ –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è –ø—Ä–∏—à–ª—é –∞—É–¥–∏–æ.")

def extract_video_id(url: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –≤–∏–¥–µ–æ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫"""
    # –û—á–∏—Å—Ç–∫–∞ URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —è–∫–æ—Ä–µ–π
    clean_url = url.split("?")[0].split("#")[0]
    
    if "youtu.be/" in clean_url:
        return clean_url.split("youtu.be/")[1].split("/")[0]
    if "v=" in clean_url:
        return clean_url.split("v=")[1].split("&")[0]
    if "embed/" in clean_url:
        return clean_url.split("embed/")[1].split("/")[0]
    return clean_url.split("/")[-1]

def download_audio(url: str) -> str:
    """–†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ yt-dlp"""
    ydl_opts = {
        'format': 'bestaudio/best',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'outtmpl': 'downloads/%(title)s.%(ext)s',
        'quiet': True
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info).replace(".webm", ".mp3")
            return filename
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ yt-dlp: {str(e)}", exc_info=True)
        return None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        url = update.message.text
        if not ("youtube.com" in url or "youtu.be" in url):
            await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ YouTube —Å—Å—ã–ª–∫–∞!")
            return

        video_id = extract_video_id(url)
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π ID: {video_id}")

        # –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ RapidAPI
        params = {"id": video_id, "ext": "mp3", "quality": "128kbps"}
        headers = {"X-RapidAPI-Host": API_HOST, "X-RapidAPI-Key": RAPIDAPI_KEY}
        
        response = requests.get(API_URL, headers=headers, params=params)
        logger.info(f"–û—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")

        if response.status_code == 200:
            data = response.json()
            if data.get("status") == "ok" and data.get("url"):
                await update.message.reply_audio(
                    audio=data["url"],
                    title=data.get("title", "–ê—É–¥–∏–æ")[:64],
                    duration=data.get("duration", 0)
                )
                return
            error_msg = data.get('msg', '–ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        else:
            error_msg = f"–û—à–∏–±–∫–∞ API: {response.status_code}"

        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ yt-dlp
        await update.message.reply_text(f"‚ö†Ô∏è {error_msg}. –ü—Ä–æ–±—É—é —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
        
        audio_path = download_audio(url)
        if audio_path:
            try:
                await update.message.reply_audio(audio=open(audio_path, "rb"))
            finally:
                os.remove(audio_path)  # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await update.message.reply_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
    os.makedirs("downloads", exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Render
    if os.getenv("RENDER"):
        app.run_webhook(
            listen="0.0.0.0",
            port=int(os.getenv("PORT", 10000)),
            webhook_url=os.getenv("WEBHOOK_URL"),
            secret_token=os.getenv("SECRET_TOKEN", "DEFAULT_SECRET")
        )
    else:
        app.run_polling()