import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import requests  # –ó–∞–º–µ–Ω—è–µ–º aiohttp –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
TOKEN = os.getenv("8027258642:AAFjyM9Bze0bXITSOKKwBYjnxJ5Vt6JpLAk")  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
RAPID_API_KEY = os.getenv("d6b3cbc8c6msh937aca5d90c4dc5p1c1a7fjsn8d19c67c0361")
RAPID_API_HOST = "youtube-mp3.p.rapidapi.com"
RAPID_API_URL = "https://youtube-mp3.p.rapidapi.com/get"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéµ –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –∞—É–¥–∏–æ!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID
        video_id = extract_video_id(url)
        if not video_id:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è YouTube —Å—Å—ã–ª–∫–∞")
        
        await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        response = requests.get(
            RAPID_API_URL,
            headers={
                "X-RapidAPI-Key": RAPID_API_KEY,
                "X-RapidAPI-Host": RAPID_API_HOST
            },
            params={"id": video_id}
        )

        if response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ API: {response.text}")

        data = response.json()
        
        if data.get("status") != "ok":
            raise Exception(data.get("msg", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
        await update.message.reply_audio(
            audio=data['link'],
            title=f"{data.get('title', 'audio')[:64]}.mp3",
            performer="YouTube Audio Bot"
        )

    except Exception as e:
        logger.error(f"Error: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def extract_video_id(url: str) -> str:
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫
    if "youtube.com/watch?v=" in url:
        return url.split("v=")[1].split("&")[0]
    if "youtu.be/" in url:
        return url.split("youtu.be/")[1].split("?")[0]
    if "youtube.com/embed/" in url:
        return url.split("embed/")[1].split("?")[0]
    return None

def main():
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()