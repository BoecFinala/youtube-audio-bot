import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import asyncio
import nest_asyncio

nest_asyncio.apply()

TOKEN = '8027258642:AAFjyM9Bze0bXITSOKKwBYjnxJ5Vt6JpLAk'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
RAPID_API_KEY = "d6b3cbc8c6msh937aca5d90c4dc5p1c1a7fjsn8d19c67c0361"
RAPID_API_HOST = "youtube-mp36.p.rapidapi.com/get"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –°–∫–∏–Ω—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube ‚Äî —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É —á–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä–≤–∏—Å üéß")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    
    if "youtube.com" in url or "youtu.be" in url:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É... ‚è≥")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
        headers = {
            "X-RapidAPI-Key": RAPID_API_KEY,
            "X-RapidAPI-Host": RAPID_API_HOST
        }
        params = {"url": url}

        try:
            response = requests.get(RAPID_API_HOST, headers=headers, params=params)
            
            if response.status_code == 200:
                data = response.json()
                mp3_url = data.get('link')
                title = data.get('title', 'audio').replace("/", "_").replace("\\", "_") + ".mp3"

                if mp3_url:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª
                    await update.message.reply_audio(mp3_url, filename=title)
                else:
                    await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É:\n{data}")
            else:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {response.status_code}")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
    else:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É —Å YouTube.")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    asyncio.run(main())