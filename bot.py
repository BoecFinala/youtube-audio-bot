import os
import aiohttp
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

TOKEN = '8027258642:AAFjyM9Bze0bXITSOKKwBYjnxJ5Vt6JpLAk'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
RAPID_API_URL = "https://youtube-mp3.p.rapidapi.com/get"
RAPID_API_KEY = "d6b3cbc8c6msh937aca5d90c4dc5p1c1a7fjsn8d19c67c0361"
RAPID_API_HOST = "youtube-mp3.p.rapidapi.com"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéµ –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –∞—É–¥–∏–æ!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    
    if not ("youtube.com" in url or "youtu.be" in url):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é YouTube —Å—Å—ã–ª–∫—É")
        return

    await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    
    try:
        video_id = extract_video_id(url)
        if not video_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ")

        async with aiohttp.ClientSession() as session:
            async with session.get(
                RAPID_API_URL,
                headers={
                    "X-RapidAPI-Key": RAPID_API_KEY,
                    "X-RapidAPI-Host": RAPID_API_HOST
                },
                params={"id": video_id}
            ) as response:
                
                if response.status != 200:
                    error_text = await response.text()
                    raise Exception(f"API Error {response.status}: {error_text}")
                
                data = await response.json()
                
                if data.get("status") != "ok":
                    raise Exception(f"–°–µ—Ä–≤–∏—Å–Ω–∞—è –æ—à–∏–±–∫–∞: {data.get('msg', 'Unknown error')}")
                
                download_link = data.get("link")
                title = f"{data.get('title', 'audio')}.mp3".replace("/", "_")

                await update.message.reply_audio(
                    audio=download_link,
                    title=title[:64],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                    performer="YouTube Audio Bot"
                )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def extract_video_id(url: str) -> str:
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –≤–∏–¥–µ–æ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫
    if "youtu.be/" in url:
        return url.split("youtu.be/")[-1].split("?")[0]
    if "v=" in url:
        return url.split("v=")[-1].split("&")[0]
    return url.split("/")[-1]

def main():
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()