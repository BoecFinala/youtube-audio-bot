import os
import yt_dlp
from moviepy.audio.io.AudioFileClip import AudioFileClip
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import asyncio
import nest_asyncio

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Windows
nest_asyncio.apply()

TOKEN = '8027258642:AAFjyM9Bze0bXITSOKKwBYjnxJ5Vt6JpLAk'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –°–∫–∏–Ω—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube, –∏ —è –≤—ã—Ä–µ–∂—É –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –¥–ª—è —Ç–µ–±—è üéß")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    if "youtube.com" in url or "youtu.be" in url:
        await update.message.reply_text("–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ... ‚è≥")
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é yt-dlp + cookies.json
            ydl_opts = {
                'format': 'mp4',
                'outtmpl': 'video.mp4',
                'cookiefile': 'cookies.txt',  # ‚Üê –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª —Å –∫—É–∫–∞–º–∏
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])
            video_path = "video.mp4"

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
            with yt_dlp.YoutubeDL({'cookiefile': 'cookies.json'}) as ydl:
                info_dict = ydl.extract_info(url, download=False)
                video_title = info_dict.get('title', 'audio').replace("/", "_").replace("\\", "_")

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ
            audio_path = f"{video_title}.mp3"
            with AudioFileClip(video_path) as clip:
                clip.write_audiofile(audio_path)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            with open(audio_path, 'rb') as audio_file:
                await update.message.reply_audio(audio_file)

            # –û—á–∏—Å—Ç–∫–∞
            os.remove(video_path)
            os.remove(audio_path)

        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
    else:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É —Å YouTube.")

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ nest_asyncio
    asyncio.run(main())